<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="http://localhost:3000/style.css" />
    <title>Document</title>
    <style>
      * {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
  }
  
  body {
    font-family: 'Jost', sans-serif;
    background-color: whitesmoke;
  }
  
  button {
    padding: 10px;
    width: 70px;
    color: white;
    font-family: inherit;
    border-radius: 5px;
    cursor: pointer;
    border: 1px solid black;
    background-color: black;
    box-shadow: 0px 2px 6px 0px rgba(0, 0, 0, 0.5);
    font-size: 0.9rem;
  }
  
  .app {
    max-width: 1224px;
    width: 92%;
    margin: 20px auto;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 15px;
    width: 100%;
    padding-bottom: 10px;
  }
  
  .header h2 {
    min-width: fit-content;
  }
  
  .server-message {
    width: 100%;
    padding: 16px;
    border-radius: 5px;
  }
  
  .input-div {
    width: 100%;
    height: 200px;
    border-radius: 5px;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    border: 2px dotted black;
    background-color: white;
    position: relative;
  }
  
  .input-div .browse {
    color: black;
    font-weight: bold;
  }
  
  .file {
    width: 100%;
    height: 100%;
    position: absolute;
    opacity: 0;
    cursor: pointer;
  }
  
  .saved-div,
  .queued-div {
    width: 100%;
    min-height: 150px;
    display: flex;
    justify-content: flex-start;
    flex-wrap: wrap;
    gap: 15px;
    position: relative;
    border-radius: 5px;
    border: 2px dotted black;
    background-color: white;
  }
  
  .saved-div .image,
  .queued-div .image {
    height: 150px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    position: relative;
  }
  
  .saved-div .image:nth-child(4n),
  .queued-div .image:nth-child(4n) {
    margin-right: 0;
  }
  
  .saved-div .image img,
  .queued-div .image img {
    height: 100%;
    width: 100%;
  }
  
  .saved-div .image span,
  .queued-div .image span {
    position: absolute;
    top: -4px;
    right: 4px;
    cursor: pointer;
    font-size: 22px;
    color: white;
  }
  
  .saved-div .image span:hover,
  .queued-div .image span:hover {
    opacity: 0.8;
  }
  
  .saved-div .span--hidden,
  .queued-div .span--hidden {
    visibility: hidden;
  }
    </style>
  </head>
  <body>
    <main class="app">
      <div class="header">
        <h2>Upload images</h2>
        <div class="server-message"></div>
      </div>

      <div class="input-div">
        <p>
          Drags & drop images here
          <span class="browse">Browse</span>
        </p>
        <input
          type="file"
          class="file"
          multiple="multiple"
        />
      </div>

      <form id="saved-form">
        <div class="header">
          <h3>Saved in Server</h3>
          <button type="submit">Delete</button>
        </div>
        <div class="saved-div"></div>
      </form>

      <form id="queued-form">
        <div class="header">
          <h3>Queued in Frontend</h3>
          <button type="submit">Upload</button>
        </div>
        <div class="queued-div"></div>
        
      </form>
    </main>

    <script>
      let queuedImagesArray = [],
        savedForm = document.querySelector("#saved-form"),
        queuedForm = document.querySelector("#queued-form"),
        saveDiv = document.querySelector(".saved-div"),
        queuedDiv = document.querySelector(".queued-div"),
        inputDiv = document.querySelector(".input-div"),
        input = document.querySelector(".input-div input"),
      

        serverMessage = document.querySelector(".server-message"),
        deleteImages = [];

      // // Saved in server images
      // if (savedImages) displaySavedImages();
      // function displaySavedImages() {
      //   let images = "";
      //   savedImages.forEach((image, index) => {
      //     images += `
      //       <div class="image">
      //   <img src="http://localhost:3000/uploads/${image}" alt="image"/>
      //   <span onclick="deleteSavedImage(${index})">&times;</span>
      //       </div> 
      //       `;
      //   });

      //   saveDiv.innerHTML = images;
      // }

      // function deleteSavedImage(index) {
      //   deleteImages.push(savedImages[index]);
      //   savedImages.splice(index, 1);
      //   displaySavedImages();
      // }

      // savedForm.addEventListener("submit" , (e) => {
      //   e.preventDefault();
      //   deleteImagesFromSever()
      // })
      // function deleteImagesFromSever(){
      //   fetch("delete" , {
      //     method:"PUT",
      //     headers:{
      //       "Accept": "application/json , text/plain , */*",
      //       "Content-Type": "application/json"
      //     },
      //     body: JSON.stringify({deleteImages})
      //   })
      //   .then(response => {
      //     if(response.status != 200) throw new Error(response.statusText);
      //     deleteImages = []
      //     serverMessage.innerHTML = response.statusText
      //     serverMessage.style.cssText = "background-color: #d4edda ;color:#1b5e20  "
      //   })
      //   .catch(error => {
      //     serverMessage.innerHTML = error
      //     serverMessage.style.cssText = "background-color: #d4edda ;color:#1b5e20  "

      //   })
      // }
      // queued in images
 
      input.addEventListener("change", () => {
        const files = input.files;
        for (let i = 0; i < files.length; i++) {
          queuedImagesArray.push(files[i]);
        }
        queuedForm.reset();
        displayQueuedImages();
      });
      inputDiv.addEventListener("drop", (e) => {
        e.preventDefault();
        const files = e.dataTransfer.files;
        for (let i = 0; i < files.length; i++) {
          if (!files[i].type.match("image")) continue;

          if (queuedImagesArray.every((image) => image.name !== files[i].name))
            queuedImagesArray.push(files[i]);
        }
        displayQueuedImages();
      });
      function displayQueuedImages() {
        let images = "";
        queuedImagesArray.forEach((image, index) => {
          images += `
            <div class="image">
        <img src="${URL.createObjectURL(image)}" alt="image"/>
        <span onclick="deleteQueuedImage(${index})">&times;</span>
            </div> 
            `;
        });

        queuedDiv.innerHTML = images;
      }

      function deleteQueuedImage(index) {
        queuedImagesArray.splice(index, 1);
        displayQueuedImages();
      }
      queuedForm.addEventListener("submit", (e) => {
        e.preventDefault();
        sendQueuedImagesToServer();
      });

      function sendQueuedImagesToServer() {
        const formData = new FormData(queuedForm);

        queuedImagesArray.forEach((image, index) => {
          formData.append(`file[${index}]`, image);
        });
        fetch("http://localhost:8080/api/upload/upload", {
          method: "POST",
          body: formData,
        })
          .then((response) => {
            if (response.status !== 200) throw Error(response.statusText);
            location.reload();
          })
          .catch((error) => {
            serverMessage.innerHTML = error;
            serverMessage.style.cssText =
              "background-color: #f8d7da , color: #ffffff";
          });
      }
    </script>
  </body>
</html>
